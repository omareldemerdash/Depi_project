pipeline {
    agent any
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose Terraform action to perform')
    }
    environment {
        CREDENTIALS = credentials('dockerhub')
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_WORKSPACE = 'dev'
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/omareldemerdash/Depi_project.git', branch: 'main'
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan or Destroy') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        if (params.ACTION == 'apply') {
                            sh '''
                                terraform plan -out=tfplan
                                terraform apply -auto-approve tfplan
                            '''
                        } else if (params.ACTION == 'destroy') {
                            sh '''
                                terraform destroy -auto-approve
                            '''
                        }
                    }
                }
            }
        }

	stage('Get Manager IP') {
    when {
        expression { params.ACTION == 'apply' }
    }
    steps {
        script {
            env.MANAGER_IP = sh(
                script: "terraform output -raw manager_public_ip",
                returnStdout: true
            ).trim()
            echo "Manager Public IP: ${env.MANAGER_IP}"
        }
    }
}
	stage('Docker Build & Push') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
               sh '''
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP docker build -t omareldemerdash28/inks-db:latest -f Dockerfile.db  .;
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP docker build -t omareldemerdash28/inks-app:latest -f Dockerfile.app .;
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP "echo $CREDENTIALS_PSW | docker login -u $CREDENTIALS_USR --password-stdin";
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP docker push omareldemerdash28/inks-db:latest
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP "echo $CREDENTIALS_PSW | docker login -u $CREDENTIALS_USR --password-stdin";
                 ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP docker push omareldemerdash28/inks-app:latest
               '''
            }
        }

	stage('Docker run') {
            steps {
                sh '''
			chmod 600 my_key
			scp -r -o StrictHostKeyChecking=no -i "my_key" /var/jenkins_home/workspace/pipeline1  ec2-user@$MANAGER_IP:/home/ec2-user/
			ssh -o StrictHostKeyChecking=no -i "my_key" ec2-user@$MANAGER_IP docker stack deploy -c docker-stack.yml inksmanager
                '''
            }
        }

    }
}

